{
  "contractName": "CrossChainEnabledArbitrumL1",
  "abi": [],
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"https://arbitrum.io/[Arbitrum] specialization or the {CrossChainEnabled} abstraction the L1 side (mainnet). This version should only be deployed on L1 to process cross-chain messages originating from L2. For the other side, use {CrossChainEnabledArbitrumL2}. The bridge contract is provided and maintained by the arbitrum team. You can find the address of this contract on the rinkeby testnet in https://developer.offchainlabs.com/docs/useful_addresses[Arbitrum's developer documentation]. _Available since v4.6._\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor\"}},\"stateVariables\":{\"_bridge\":{\"custom:oz-upgrades-unsafe-allow\":\"state-variable-immutable\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"project:/contracts/openzeppelin-contracts-master/contracts/crosschain/arbitrum/CrossChainEnabledArbitrumL1.sol\":\"CrossChainEnabledArbitrumL1\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"project:/contracts/openzeppelin-contracts-master/contracts/crosschain/CrossChainEnabled.sol\":{\"keccak256\":\"0x1ec2f661e2b0bd06b245f7e847111d5b40d32380794bd2d791e89b0bdc3ef082\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://9466ccdfd19225a51b9b785e60f22b04220684b8c9f24e11b62b740ad77f761f\",\"dweb:/ipfs/QmUAXfC4rzW9cqVdNkXA5c4HgqxNRwzo2MbUV4wDT52tED\"]},\"project:/contracts/openzeppelin-contracts-master/contracts/crosschain/arbitrum/CrossChainEnabledArbitrumL1.sol\":{\"keccak256\":\"0x05f77d187942df5569ff88deeac13dab72ce9364d26822573d44c7693f7c408c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2ae6ac96520415ef45526e734e4615338c8e28a66604db4d8026135922928fe9\",\"dweb:/ipfs/QmbKfJfdMuZrkc6o1vGMN6YtQSJB1cKV5JQheQCAjqwbfU\"]},\"project:/contracts/openzeppelin-contracts-master/contracts/crosschain/arbitrum/LibArbitrumL1.sol\":{\"keccak256\":\"0x364ef776375bac74a5f4f2fd1dc1d4a089915ea0fe720249bb71431e7b2f787f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://617a7d7e5be668c840817309f3304f1856d35c56090b8772eeba2bd3f77b279c\",\"dweb:/ipfs/Qmei4Am5cKUx1qyTpFvJ5vo3hFuvtzq5gaz48KUNkETyD6\"]},\"project:/contracts/openzeppelin-contracts-master/contracts/crosschain/errors.sol\":{\"keccak256\":\"0xa1e9b651a2427925598b49ef35da5930abc07859cfac5b9dfb1912f063a024b3\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c514518c36a3fb1c5f1a99d88857e93160c72ea1fd728c443406ad1acb43ae9a\",\"dweb:/ipfs/Qmc3oXjBNhdeM5cfWpsvewXZAhH34Scgna2W3MvLaiiapQ\"]},\"project:/contracts/openzeppelin-contracts-master/contracts/vendor/arbitrum/IBridge.sol\":{\"keccak256\":\"0x44c94be4cf6547c10824a4c5e3273a0ac1ebf38b1e9493edbdf765fa0ee4d9a3\",\"license\":\"BUSL-1.1\",\"urls\":[\"bzz-raw://e4a052a81e31c97fb2a1731e40f950d9fbdf63d71ff74dc9e77957705fc45a70\",\"dweb:/ipfs/QmbpmVHtkxQQatFSohq6xkAfhpgKq3wgVLtTH8hpFP9RMj\"]},\"project:/contracts/openzeppelin-contracts-master/contracts/vendor/arbitrum/IOutbox.sol\":{\"keccak256\":\"0xbefd3211783fd2dcb5e34ef4b1a6221d5ad863d3979a93e629925191137f2bc5\",\"license\":\"BUSL-1.1\",\"urls\":[\"bzz-raw://c70d89a337eec28811989f3cc976a13bfd155148edc6c506c8bcf2c3bb4ec2fd\",\"dweb:/ipfs/QmP3SwwgfzsMuQempgWdnzws9Z6GcG75yaoHca7p2efvmd\"]}},\"version\":1}",
  "bytecode": "0x",
  "deployedBytecode": "0x",
  "immutableReferences": {},
  "generatedSources": [],
  "deployedGeneratedSources": [],
  "sourceMap": "",
  "deployedSourceMap": "",
  "source": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (crosschain/arbitrum/CrossChainEnabledArbitrumL1.sol)\n\npragma solidity ^0.8.4;\n\nimport \"../CrossChainEnabled.sol\";\nimport \"./LibArbitrumL1.sol\";\n\n/**\n * @dev https://arbitrum.io/[Arbitrum] specialization or the\n * {CrossChainEnabled} abstraction the L1 side (mainnet).\n *\n * This version should only be deployed on L1 to process cross-chain messages\n * originating from L2. For the other side, use {CrossChainEnabledArbitrumL2}.\n *\n * The bridge contract is provided and maintained by the arbitrum team. You can\n * find the address of this contract on the rinkeby testnet in\n * https://developer.offchainlabs.com/docs/useful_addresses[Arbitrum's developer documentation].\n *\n * _Available since v4.6._\n */\nabstract contract CrossChainEnabledArbitrumL1 is CrossChainEnabled {\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable\n    address private immutable _bridge;\n\n    /// @custom:oz-upgrades-unsafe-allow constructor\n    constructor(address bridge) {\n        _bridge = bridge;\n    }\n\n    /**\n     * @dev see {CrossChainEnabled-_isCrossChain}\n     */\n    function _isCrossChain() internal view virtual override returns (bool) {\n        return LibArbitrumL1.isCrossChain(_bridge);\n    }\n\n    /**\n     * @dev see {CrossChainEnabled-_crossChainSender}\n     */\n    function _crossChainSender() internal view virtual override onlyCrossChain returns (address) {\n        return LibArbitrumL1.crossChainSender(_bridge);\n    }\n}\n",
  "sourcePath": "/Users/urieltan/gitclones/ft5004/nft-project/contracts/openzeppelin-contracts-master/contracts/crosschain/arbitrum/CrossChainEnabledArbitrumL1.sol",
  "ast": {
    "absolutePath": "project:/contracts/openzeppelin-contracts-master/contracts/crosschain/arbitrum/CrossChainEnabledArbitrumL1.sol",
    "exportedSymbols": {
      "ArbitrumL1_Bridge": [
        40167
      ],
      "ArbitrumL1_Outbox": [
        40528
      ],
      "CrossChainEnabled": [
        1758
      ],
      "CrossChainEnabledArbitrumL1": [
        1902
      ],
      "InvalidCrossChainSender": [
        2062
      ],
      "LibArbitrumL1": [
        2004
      ],
      "NotCrossChainCall": [
        2056
      ]
    },
    "id": 1903,
    "license": "MIT",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 1854,
        "literals": [
          "solidity",
          "^",
          "0.8",
          ".4"
        ],
        "nodeType": "PragmaDirective",
        "src": "135:23:13"
      },
      {
        "absolutePath": "project:/contracts/openzeppelin-contracts-master/contracts/crosschain/CrossChainEnabled.sol",
        "file": "../CrossChainEnabled.sol",
        "id": 1855,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 1903,
        "sourceUnit": 1759,
        "src": "160:34:13",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "project:/contracts/openzeppelin-contracts-master/contracts/crosschain/arbitrum/LibArbitrumL1.sol",
        "file": "./LibArbitrumL1.sol",
        "id": 1856,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 1903,
        "sourceUnit": 2005,
        "src": "195:29:13",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "abstract": true,
        "baseContracts": [
          {
            "baseName": {
              "id": 1858,
              "name": "CrossChainEnabled",
              "nameLocations": [
                "835:17:13"
              ],
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 1758,
              "src": "835:17:13"
            },
            "id": 1859,
            "nodeType": "InheritanceSpecifier",
            "src": "835:17:13"
          }
        ],
        "canonicalName": "CrossChainEnabledArbitrumL1",
        "contractDependencies": [],
        "contractKind": "contract",
        "documentation": {
          "id": 1857,
          "nodeType": "StructuredDocumentation",
          "src": "226:559:13",
          "text": " @dev https://arbitrum.io/[Arbitrum] specialization or the\n {CrossChainEnabled} abstraction the L1 side (mainnet).\n This version should only be deployed on L1 to process cross-chain messages\n originating from L2. For the other side, use {CrossChainEnabledArbitrumL2}.\n The bridge contract is provided and maintained by the arbitrum team. You can\n find the address of this contract on the rinkeby testnet in\n https://developer.offchainlabs.com/docs/useful_addresses[Arbitrum's developer documentation].\n _Available since v4.6._"
        },
        "fullyImplemented": true,
        "id": 1902,
        "linearizedBaseContracts": [
          1902,
          1758
        ],
        "name": "CrossChainEnabledArbitrumL1",
        "nameLocation": "804:27:13",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "constant": false,
            "documentation": {
              "id": 1860,
              "nodeType": "StructuredDocumentation",
              "src": "859:61:13",
              "text": "@custom:oz-upgrades-unsafe-allow state-variable-immutable"
            },
            "id": 1862,
            "mutability": "immutable",
            "name": "_bridge",
            "nameLocation": "951:7:13",
            "nodeType": "VariableDeclaration",
            "scope": 1902,
            "src": "925:33:13",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_address",
              "typeString": "address"
            },
            "typeName": {
              "id": 1861,
              "name": "address",
              "nodeType": "ElementaryTypeName",
              "src": "925:7:13",
              "stateMutability": "nonpayable",
              "typeDescriptions": {
                "typeIdentifier": "t_address",
                "typeString": "address"
              }
            },
            "visibility": "private"
          },
          {
            "body": {
              "id": 1872,
              "nodeType": "Block",
              "src": "1046:33:13",
              "statements": [
                {
                  "expression": {
                    "id": 1870,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 1868,
                      "name": "_bridge",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1862,
                      "src": "1056:7:13",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 1869,
                      "name": "bridge",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1865,
                      "src": "1066:6:13",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "1056:16:13",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "id": 1871,
                  "nodeType": "ExpressionStatement",
                  "src": "1056:16:13"
                }
              ]
            },
            "documentation": {
              "id": 1863,
              "nodeType": "StructuredDocumentation",
              "src": "965:48:13",
              "text": "@custom:oz-upgrades-unsafe-allow constructor"
            },
            "id": 1873,
            "implemented": true,
            "kind": "constructor",
            "modifiers": [],
            "name": "",
            "nameLocation": "-1:-1:-1",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1866,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1865,
                  "mutability": "mutable",
                  "name": "bridge",
                  "nameLocation": "1038:6:13",
                  "nodeType": "VariableDeclaration",
                  "scope": 1873,
                  "src": "1030:14:13",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1864,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1030:7:13",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1029:16:13"
            },
            "returnParameters": {
              "id": 1867,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1046:0:13"
            },
            "scope": 1902,
            "src": "1018:61:13",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "internal"
          },
          {
            "baseFunctions": [
              1751
            ],
            "body": {
              "id": 1885,
              "nodeType": "Block",
              "src": "1222:59:13",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 1882,
                        "name": "_bridge",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1862,
                        "src": "1266:7:13",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "expression": {
                        "id": 1880,
                        "name": "LibArbitrumL1",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 2004,
                        "src": "1239:13:13",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_contract$_LibArbitrumL1_$2004_$",
                          "typeString": "type(library LibArbitrumL1)"
                        }
                      },
                      "id": 1881,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "1253:12:13",
                      "memberName": "isCrossChain",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 1962,
                      "src": "1239:26:13",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_bool_$",
                        "typeString": "function (address) view returns (bool)"
                      }
                    },
                    "id": 1883,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1239:35:13",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "functionReturnParameters": 1879,
                  "id": 1884,
                  "nodeType": "Return",
                  "src": "1232:42:13"
                }
              ]
            },
            "documentation": {
              "id": 1874,
              "nodeType": "StructuredDocumentation",
              "src": "1085:61:13",
              "text": " @dev see {CrossChainEnabled-_isCrossChain}"
            },
            "id": 1886,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_isCrossChain",
            "nameLocation": "1160:13:13",
            "nodeType": "FunctionDefinition",
            "overrides": {
              "id": 1876,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "1198:8:13"
            },
            "parameters": {
              "id": 1875,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1173:2:13"
            },
            "returnParameters": {
              "id": 1879,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1878,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 1886,
                  "src": "1216:4:13",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 1877,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "1216:4:13",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1215:6:13"
            },
            "scope": 1902,
            "src": "1151:130:13",
            "stateMutability": "view",
            "virtual": true,
            "visibility": "internal"
          },
          {
            "baseFunctions": [
              1757
            ],
            "body": {
              "id": 1900,
              "nodeType": "Block",
              "src": "1450:63:13",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 1897,
                        "name": "_bridge",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1862,
                        "src": "1498:7:13",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "expression": {
                        "id": 1895,
                        "name": "LibArbitrumL1",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 2004,
                        "src": "1467:13:13",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_contract$_LibArbitrumL1_$2004_$",
                          "typeString": "type(library LibArbitrumL1)"
                        }
                      },
                      "id": 1896,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "1481:16:13",
                      "memberName": "crossChainSender",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 2003,
                      "src": "1467:30:13",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_address_$",
                        "typeString": "function (address) view returns (address)"
                      }
                    },
                    "id": 1898,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1467:39:13",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "functionReturnParameters": 1894,
                  "id": 1899,
                  "nodeType": "Return",
                  "src": "1460:46:13"
                }
              ]
            },
            "documentation": {
              "id": 1887,
              "nodeType": "StructuredDocumentation",
              "src": "1287:65:13",
              "text": " @dev see {CrossChainEnabled-_crossChainSender}"
            },
            "id": 1901,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "id": 1891,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 1890,
                  "name": "onlyCrossChain",
                  "nameLocations": [
                    "1417:14:13"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 1724,
                  "src": "1417:14:13"
                },
                "nodeType": "ModifierInvocation",
                "src": "1417:14:13"
              }
            ],
            "name": "_crossChainSender",
            "nameLocation": "1366:17:13",
            "nodeType": "FunctionDefinition",
            "overrides": {
              "id": 1889,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "1408:8:13"
            },
            "parameters": {
              "id": 1888,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1383:2:13"
            },
            "returnParameters": {
              "id": 1894,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1893,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 1901,
                  "src": "1441:7:13",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1892,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1441:7:13",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1440:9:13"
            },
            "scope": 1902,
            "src": "1357:156:13",
            "stateMutability": "view",
            "virtual": true,
            "visibility": "internal"
          }
        ],
        "scope": 1903,
        "src": "786:729:13",
        "usedErrors": []
      }
    ],
    "src": "135:1381:13"
  },
  "compiler": {
    "name": "solc",
    "version": "0.8.19+commit.7dd6d404.Emscripten.clang"
  },
  "networks": {},
  "schemaVersion": "3.4.13",
  "updatedAt": "2023-04-18T20:14:33.564Z",
  "devdoc": {
    "details": "https://arbitrum.io/[Arbitrum] specialization or the {CrossChainEnabled} abstraction the L1 side (mainnet). This version should only be deployed on L1 to process cross-chain messages originating from L2. For the other side, use {CrossChainEnabledArbitrumL2}. The bridge contract is provided and maintained by the arbitrum team. You can find the address of this contract on the rinkeby testnet in https://developer.offchainlabs.com/docs/useful_addresses[Arbitrum's developer documentation]. _Available since v4.6._",
    "kind": "dev",
    "methods": {
      "constructor": {
        "custom:oz-upgrades-unsafe-allow": "constructor"
      }
    },
    "stateVariables": {
      "_bridge": {
        "custom:oz-upgrades-unsafe-allow": "state-variable-immutable"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  }
}